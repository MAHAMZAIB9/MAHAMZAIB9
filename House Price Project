
House Price Training and  Model building using R

#                             PROJECT WORK SCRIPT





#installing the relevant packages and libraries whose functions are used

install.packages("MLmetrics")
install.packages("train")
library(trainR)
library(MLmetrics)
library(ggplot2)
library(GGally)
library(caret, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(tidymodels)
library(broom)
library(tidyverse)
install.packages("corrplot")
library(corrplot)
library(lubridate)
install.packages("gridExtra")
library(gridExtra)
library(caTools)
library(correlation)

train <- read.csv("train.csv", stringsAsFactors = FALSE)
test <- read.csv("test.csv", stringsAsFactors = FALSE)


data1 <- data.frame(train)
 test_data <- test

 #EDA of the dataset by adjusting missing values
#some NA entries in the training and test sets actually mean "no basement" 
# etc. rather than representing a missing value. These values are replaced accordingly
train$Alley[is.na(train$Alley)] = "No alley access"
test$Alley[is.na(test$Alley)] = "No alley access"
train$BsmtQual[is.na(train$BsmtQual)] = "No basement"
test$BsmtQual[is.na(test$BsmtQual)] = "No basement"
train$BsmtCond[is.na(train$BsmtCond)] = "No basement"
test$BsmtCond[is.na(test$BsmtCond)] = "No basement"
train$BsmtExposure[is.na(train$BsmtExposure)] = "No basement"
test$BsmtExposure[is.na(test$BsmtExposure)] = "No basement"
train$BsmtFinType1[is.na(train$BsmtFinType1)] = "No basement"
test$BsmtFinType1[is.na(test$BsmtFinType1)] = "No basement"
train$BsmtFinType2[is.na(train$BsmtFinType2)] = "No basement"
test$BsmtFinType2[is.na(test$BsmtFinType2)] = "No basement"
train$FireplaceQu[is.na(train$FireplaceQu)] = "No fireplace"
test$FireplaceQu[is.na(test$FireplaceQu)] = "No fireplace"
train$GarageType[is.na(train$GarageType)] = "No garage"
test$GarageType[is.na(test$GarageType)] = "No garage"
train$GarageFinish[is.na(train$GarageFinish)] = "No garage"
test$GarageFinish[is.na(test$GarageFinish)] = "No garage"
train$GarageQual[is.na(train$GarageQual)] = "No garage"
test$GarageQual[is.na(test$GarageQual)] = "No garage"
train$GarageCond[is.na(train$GarageCond)] = "No garage"
test$GarageCond[is.na(test$GarageCond)] = "No garage"
train$PoolQC[is.na(train$PoolQC)] = "No pool"
test$PoolQC[is.na(test$PoolQC)] = "No pool"
train$Fence[is.na(train$Fence)] = "No fence"
test$Fence[is.na(test$Fence)] = "No fence"
train$MiscFeature[is.na(train$MiscFeature)] = "None"
test$MiscFeature[is.na(test$MiscFeature)] = "None"
#replace missing values in MasVnrType column in training and test sets with "None"
#, which is most commonly occuring type
train$MasVnrType[is.na(train$MasVnrType)] = "None"
test$MasVnrType[is.na(test$MasVnrType)] = "None"
#replace missing values in Electrical column in training set with _
#"SBrkr, which is most frequently occuring electrical set-up
train$Electrical[is.na(train$Electrical)] = "SBrkr"
#replace missing values in MSZoning column in test set with RL (most frequently occuring)
test$MSZoning[is.na(test$MSZoning)] = "RL"
#replace missing values in Utilities column in test set with AllPub (most frequently occuring)
test$Utilities[is.na(test$Utilities)] = "AllPub"
#replace missing values in Exterior1st column in test set with VinylSd (most frequently occuring)
test$Exterior1st[is.na(test$Exterior1st)] = "VinylSd"
#replace missing values in Exterior2nd column in test set with VinylSd (most frequently occuring)
test$Exterior2nd[is.na(test$Exterior2nd)] = "VinylSd"
#replace missing value in KitchenQual column in test set with TA (most common)
test$KitchenQual[is.na(test$KitchenQual)] = "TA"
#replace missing values in Functional column in test set with Min2 (most common)
test$Functional[is.na(test$Functional)] = "Min2"
#replace missing value in SaleType column in test set with WD (most common)
test$SaleType[is.na(test$SaleType)] = "WD"

#replace missing value in BsmtFinSF1 column in test set with 0 (has no basement)
test$BsmtFinSF1[is.na(test$BsmtFinSF1)] = 0
#replace missing value in BsmtFinSF2 column in test set with 0 (has no basement)
test$BsmtFinSF2[is.na(test$BsmtFinSF2)] = 0
#replace missing value in BsmtUnfSF column in test set with 0 (has no basement)
test$BsmtUnfSF[is.na(test$BsmtUnfSF)] = 0
#replace missing value in TotalBsmtSF column in test set with 0 (has no basement)
test$TotalBsmtSF[is.na(test$TotalBsmtSF)] = 0
#replace missing values in BsmtFullBath column in test set with 0 (has no basement)
test$BsmtFullBath[is.na(test$BsmtFullBath)] = 0
#replace missing values in BsmtHalfBath column in test set with 0 (has no basement)
test$BsmtHalfBath[is.na(test$BsmtHalfBath)] = 0

#replace missing value in GarageCars column in test set with 0 (no garage)
test$GarageCars[is.na(test$GarageCars)] = 0
#replace missing value in GarageArea column in test set with 0 (no garage)
test$GarageArea[is.na(test$GarageArea)] = 0

#replace missing values in LotFrontage column in training and test sets with median
train$LotFrontage[is.na(train$LotFrontage)] = median(train$LotFrontage, na.rm = TRUE)
test$LotFrontage[is.na(test$LotFrontage)] = median(test$LotFrontage, na.rm = TRUE)

#replacing missing values ion Saleprice with 

#replace missing values in GarageYrBlt column in training and test sets with -9999
train$GarageYrBlt[is.na(train$GarageYrBlt)] = -9999
test$GarageYrBlt[is.na(test$GarageYrBlt)] = -9999
#replace missing values in MasVnrArea column in training and test sets with -9999
train$MasVnrArea[is.na(train$MasVnrArea)] = -9999
test$MasVnrArea[is.na(test$MasVnrArea)] = -9999


#checking the structure of data
str(data1)

#Finding correlation between response variable adn several explanatery variables to use them in the model building. 
#We plotted the graphs for all the 81 variables. 
#Some of variables gave no specific correlation with the saleprice. 
#While others that gave the response, being considerable for model building are plotted below

correlation <- correlation(data1)

# Linear regressio model of the variables that are good to take variables for
# multiple linear regression model

a<- ggplot(data1, aes(x=  GarageArea  , y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE)


b<- ggplot(data1, aes(x=  HouseStyle , y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE)


c<- ggplot(data1, aes(x=   OverallQual , y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE)


d<- ggplot(data1, aes(x=   OverallCond , y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE)


e<- ggplot(data1, aes(x=  YearBuilt   , y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE)+ scale_x_log10()


f<- ggplot(data1, aes(x=  GrLivArea , y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE) + scale_x_log10()


g<- ggplot(data1, aes(x=  CentralAir, y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE)


h<- ggplot(data1, aes(x= ExterQual  , y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE)

i <- ggplot(data1, aes(x= TotalBsmtSF  , y=SalePrice)) + geom_point()+
  geom_smooth (method = "lm" , se=TRUE) +scale_x_log10()



grid.arrange(a,b,c,d,e,f,g,h,i, nrow=4)



#mutating the variables that has an impact on the response variable for using them in the model building

data1 $ CentralAir <- as.factor(data1 $ CentralAir)
data1 $ KitchenQual <- as.factor(data1 $ KitchenQual)
data1 $ HouseStyle <- as.factor(data1 $ HouseStyle)
data1 $ ExterQual <- as.factor(data1 $ ExterQual)
data1 $ YearBuilt <- as.numeric(data1 $ YearBuilt)

data1 <- data1 %>%
          mutate(GrLiveArea= GrLivArea/10)
data1 <- data1 %>%
         mutate(SalePrice = SalePrice/1000)
mean(data1 $ SalePrice , na.arm = TRUE)

str(data1)




#Models building via multiple linear regression


mod1 <- lm(SalePrice ~ YearBuilt + TotalBsmtSF+ OverallQual, data = data1)
mod1
summary(mod1)
augmented_mod <- augment(mod1)
summary(augmented_mod)

modd <- ggplot(augmented_mod, aes(x=TotalBsmtSF, y=SalePrice , 
      color = YearBuilt , size =OverallQual )) + geom_point() + 
       geom_smooth(method = "lm" , se = FALSE) +scale_x_log10() +scale_y_log10()

plot(modd)

#As concluded from the adjusted R-squared value of 0.6853 and p-values less than 0.05,
#the relationship between these variables appear to be quite strong.

#Model 2

mod2 <- lm(SalePrice ~ YearBuilt + ExterQual + GrLivArea, data = data1)
mod2
augmented_mod2 <- augment(mod2)
summary(mod2)
modd2 <- ggplot(augmented_mod2, aes(x=GrLivArea , y=SalePrice , 
              color = ExterQual, size = YearBuilt ))+ 
         geom_point()+ geom_smooth(method = "lm" , se = FALSE) + 
          scale_x_log10() +scale_y_log10()
 
plot(modd2)
#As concluded from the adjusted R-squared value of 0.72 and p-values less than 0.05,
#the relationship between these variables appear to be quite strong.




#training the models

model_lm <- train(SalePrice ~ ., 
                  data = data1,
                  method = "lm")


#Model Performance Testing,

hist(mod1$residuals)
hist(mod2$residuals)

#A residual is a measure of how well a line fits an individual data point. 
#This vertical distance is known as a residual. 
#The closer a data point's residual is to 0, the better the fit.


#SHAPIRO TEST, Checking the P values for checking the accuracy of model

shapiro.test(x = mod1$residuals[3:5000])
shapiro.test(x = mod2$residuals[3:5000])


#ACCURACY OF THE MODEL ON THE TRAIN DATA


pred=mod1$fitted.values

tally_table=data.frame(actual=data1$SalePrice, predicted=pred)

mape=mean(abs(tally_table$actual-tally_table$predicted)/tally_table$actual)
accuracy=1-mape
accuracy
cat("the accuracy is:", accuracy)

#2

pred=mod2$fitted.values

tally_table=data.frame(actual=data1$SalePrice, predicted=pred)

mape=mean(abs(tally_table$actual-tally_table$predicted)/tally_table$actual)
accuracy=1-mape
accuracy
cat("the accuracy is:", accuracy)


#PREDICTION ON THE TEST DATA
#prediction of SalePrice values on basis of models


prd1 <- predict (mod1, test_data)
print(prd1)
prd2 <- predict(mod2, test_data)
print(prd2)


hist(prd1)
hist(prd2)



#Hence the print of the predicted values is obtained. 
#Models are accurate upto 85% approx. 


